# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2022 Axway Software SA and its affiliates. All rights reserved.
#
default:
  before_script:
  - if [ -z "$DOCKER_TAG" ]; then
  -   eval export DOCKER_TAG=$CI_COMMIT_REF_NAME
  - fi
  - echo Using DOCKER_TAG=$DOCKER_TAG

stages:
- build
- test
- security
- push

build:
  stage: build
  script:
  - if [ -n "$INSTALL_KIT" ]; then
  -   echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, and kit=$INSTALL_KIT
  -   docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg BUILD_VERSION=$BUILD_VERSION
        --build-arg BUILD_REVISION=$BUILD_REVISION
        --build-arg INSTALL_KIT=$INSTALL_KIT
        docker
  - elif [ -n "$URL_BASE" ]; then
  -   if [ -n "$PACKAGE" ]; then
  -     echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, url=$URL_BASE and package=$PACKAGE
  -     docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg BUILD_VERSION=$BUILD_VERSION
          --build-arg BUILD_REVISION=$BUILD_REVISION
          --build-arg URL_BASE=$URL_BASE
          --build-arg PACKAGE=$PACKAGE
          docker
  -   else
  -     echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, and url=$URL_BASE
  -     docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg BUILD_VERSION=$BUILD_VERSION
          --build-arg BUILD_REVISION=$BUILD_REVISION
          --build-arg URL_BASE=$URL_BASE
          docker
  -   fi
  - else
  -     echo INSTALL_KIT or URL_BASE must be defined, aborting...
  -     exit 1
  - fi
test:
  stage: test
  before_script:
  - if [ -z "$DOCKER_TAG" ]; then
  -   eval export DOCKER_TAG=$CI_COMMIT_REF_NAME
  - fi
  - echo Using DOCKER_TAG=$DOCKER_TAG
  - docker login $RELEASE_REGISTRY_URL -u $ARTIFACTORY_CI_USER -p $ARTIFACTORY_CI_API_KEY
  script:
  - cd test
  - docker network prune --force
  - echo test001_basic_run...
  - docker-compose -f docker-compose-01.test.yml down -v
  - docker-compose -f docker-compose-01.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut || FAILED=true
  - docker-compose -f docker-compose-01.test.yml logs || true
  # redo a set of smoke tests with a runtime that already exists
  - docker-compose -f docker-compose-01.test.yml down
  - if [ ${FAILED} ]; then
  -   exit 1
  - fi
  - docker-compose -f docker-compose-01.test.yml up --abort-on-container-exit --remove-orphans
  - docker-compose -f docker-compose-01.test.yml down -v
  - echo test002 upgrade using external curl command...
  # Run an old CFT image, add data (transfers and config), export the databases invoking the /export REST API
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml down -v
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut || FAILED=true
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml logs || true
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml down
  - if [ ${FAILED} ]; then
  -   exit 1
  - fi
  # Run the new CFT image
  - docker-compose -f docker-compose-03-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut || FAILED=true
  - docker-compose -f docker-compose-03-upgrade.test.yml logs || true
  - docker-compose -f docker-compose-03-upgrade.test.yml down -v
  - if [ ${FAILED} ]; then
  -   exit 1
  - fi
  - echo test003 upgrade using pre-upgrade-job hook...
  # Run an old CFT image and add data (transfers and config)
  - docker compose -f docker-compose-04-hook-pre-upgrade.test.yml down -v
  - docker compose -f docker-compose-04-hook-pre-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut || FAILED=true
  - docker compose -f docker-compose-04-hook-pre-upgrade.test.yml logs || true
  - if [ ${FAILED} ]; then
  -   exit 1
  - fi
  # Run the pre-upgrade-job hook from a new CFT image and then stop the old CFT
  - docker compose -f docker-compose-05-hook-pre-upgrade-job.test.yml up --build --abort-on-container-exit || FAILED=true
  - docker compose -f docker-compose-05-hook-pre-upgrade-job.test.yml logs || true
  - docker compose -f docker-compose-04-hook-pre-upgrade.test.yml down
  - if [ ${FAILED} ]; then
  -   exit 1
  - fi
  # Run the new CFT image
  - docker compose -f docker-compose-03-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut || FAILED=true
  - docker compose -f docker-compose-03-upgrade.test.yml logs || true
  - docker compose -f docker-compose-03-upgrade.test.yml down -v
  - cd ..

security:
  stage: security
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
  script:
  - if [ -n "${SKIP_SECURITY}" -a "${SKIP_SECURITY}" = "1" ]; then
  -   echo "Skip security scan"
  - else
  #   Scan the image and store the URL of the scan results.
  #   The image name scanned is not deterministic; retrieve it from the output...
  -   twistcli images scan -u $TWISTLOCK_USER -p "$TWISTLOCK_PASSWORD" --address $TWISTLOCK_URL --details --output-file analysis.json $IMAGE_CFT:$DOCKER_TAG
  -   echo ">>>> analysis.json"
  -   cat analysis.json | jq .
  -   echo "<<<< analysis.json"
  #   Upload the scan result to SRM
  -   "curl --insecure -H \"Authorization: Bearer $SRM_APIKEY\" -H \"Accept: application/json\" -X POST --form \"file=@analysis.json\" ${SRM_URL}/${SRM_PROJECTID}/analysis"
  #   Remove scan results.
  -   rm -f analysis.json
  - fi

push:
  stage: push
  before_script:
  - if [ -z "$DOCKER_TAG" ]; then
  -   eval export DOCKER_TAG=$CI_COMMIT_REF_NAME
  - fi
  - echo Using DOCKER_TAG=$DOCKER_TAG
  - docker login $REGISTRY_URL -u $ARTIFACTORY_CI_USER -p $ARTIFACTORY_CI_API_KEY
  script:
  - docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:$DOCKER_TAG
  - docker push $REGISTRY_URL/$IMAGE_CFT:$DOCKER_TAG
  # Additional tag with DOCKER_ADD_TAG
  - if [ -n "$DOCKER_ADD_TAG" ]; then
  -   docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:$DOCKER_ADD_TAG
  -   docker push $REGISTRY_URL/$IMAGE_CFT:$DOCKER_ADD_TAG
  - fi

push-latest:
  stage: push
  only:
    refs:
    # Push the "latest" mutable Docker version only when tagging
    - /^\d+.\d+.\d+\-?/
  before_script:
  - if [ -z "$DOCKER_TAG" ]; then
  -   eval export DOCKER_TAG=$CI_COMMIT_REF_NAME
  - fi
  - echo Using DOCKER_TAG=$DOCKER_TAG
  - docker login $REGISTRY_URL -u $ARTIFACTORY_CI_USER -p $ARTIFACTORY_CI_API_KEY
  script:
  - docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:latest
  - docker push $REGISTRY_URL/$IMAGE_CFT:latest
