# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2021 Axway Software SA and its affiliates. All rights reserved.
#
default:
  before_script:
  - if [ -z "$DOCKER_TAG" ]; then
  -   eval export DOCKER_TAG=$CI_COMMIT_REF_NAME
  - fi
  - echo Using DOCKER_TAG=$DOCKER_TAG

stages:
- build
- test
- security
- push

build:
  stage: build
  script:
  - if [ -n "$INSTALL_KIT" ]; then
  -   echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, and kit=$INSTALL_KIT
  -   docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg BUILD_VERSION=$BUILD_VERSION
        --build-arg BUILD_REVISION=$BUILD_REVISION
        --build-arg INSTALL_KIT=$INSTALL_KIT
        docker
  - elif [ -n "$URL_BASE" ]; then
  -   if [ -n "$PACKAGE" ]; then
  -     echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, url=$URL_BASE and package=$PACKAGE
  -     docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg BUILD_VERSION=$BUILD_VERSION
          --build-arg BUILD_REVISION=$BUILD_REVISION
          --build-arg URL_BASE=$URL_BASE
          --build-arg PACKAGE=$PACKAGE
          docker
  -   else
  -     echo Build using version=$BUILD_VERSION, revision=$BUILD_REVISION, and url=$URL_BASE
  -     docker build -t $IMAGE_CFT:$DOCKER_TAG --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          --build-arg BUILD_VERSION=$BUILD_VERSION
          --build-arg BUILD_REVISION=$BUILD_REVISION
          --build-arg URL_BASE=$URL_BASE
          docker
  -   fi
  - else
  -     echo INSTALL_KIT or URL_BASE must be defined, aborting...
  -     exit 1
  - fi
test:
  stage: test
  script:
  - cd test
  - docker network prune --force  
  - docker-compose -f docker-compose-01.test.yml down -v
  - docker-compose -f docker-compose-01.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut
  - docker-compose -f docker-compose-01.test.yml logs
  - docker-compose -f docker-compose-01.test.yml down -v
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml down -v
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml logs
  - docker-compose -f docker-compose-02-pre-upgrade.test.yml down
  - docker-compose -f docker-compose-03-upgrade.test.yml up --build --abort-on-container-exit --remove-orphans --force-recreate sut
  - docker-compose -f docker-compose-03-upgrade.test.yml logs
  - docker-compose -f docker-compose-03-upgrade.test.yml down -v
  - cd ..

security:
  stage: security
  script:
  # Scan the image and store the URL of the scan results.
  # The image name scanned is not deterministic; retrieve it from the output...
  - out=`twistcli images scan -u $TWISTLOCK_USER -p "$TWISTLOCK_PASSWORD" --address $TWISTLOCK_URL $IMAGE_CFT:$DOCKER_TAG`
  - echo $out
  - eval export SEARCHING=`echo $out | cut -d ' ' -f 5 | cut -d '/' -f 2`
  - echo get scan result for image=$SEARCHING
  # Retrieve the scan result
  - "curl --insecure -u$TWISTLOCK_USER:$TWISTLOCK_PASSWORD -H \"Content-Type: application/json\" -X GET $TWISTLOCK_URL\"api/v1/scans?search=$SEARCHING&sort=time&reverse=true&limit=1&type=ciImage\" >analysis.json"
  - echo ">>>> analysis.json"
  - cat analysis.json | jq .
  - echo "<<<< analysis.json"
  # Upload the scan result to ThreadFix
  - "curl --insecure -H \"Authorization: APIKEY $THREADFIX_APIKEY\" -H \"Accept: application/json\" -X POST --form \"file=@analysis.json\" https://vulnmgt.psg.axway.int/threadfix/rest/v2.5/applications/$THREADFIX_APPID/upload"
  # Remove scan results.
  - rm -f analysis.json

push:
  stage: push
  script:
  - docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:$DOCKER_TAG
  - docker push $REGISTRY_URL/$IMAGE_CFT:$DOCKER_TAG
  # Additional tag with DOCKER_ADD_TAG
  - if [ -n "$DOCKER_ADD_TAG" ]; then
  -   docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:$DOCKER_ADD_TAG
  -   docker push $REGISTRY_URL/$IMAGE_CFT:$DOCKER_ADD_TAG
  - fi

push-latest:
  stage: push
  only:
    refs:
    # Push the "latest" mutable Docker version only when tagging
    - /^\d+.\d+.\d+\-?/
  script:
  - docker tag $IMAGE_CFT:$DOCKER_TAG $REGISTRY_URL/$IMAGE_CFT:latest
  - docker push $REGISTRY_URL/$IMAGE_CFT:latest
